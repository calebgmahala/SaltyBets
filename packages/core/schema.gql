# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Bet {
  amount: Float!
  createdAt: DateTimeISO!
  fighterColor: FighterColor!
  id: ID!
  match: Match!
  user: User!
}

input CreateUserInputDto {
  alias: String!
  balance: Float! = 0
  password: String!
  securityLevel: SecurityLevel! = USER
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Fighter {
  bestStreak: Int!
  createdTime: DateTimeISO!
  elo: Int!
  id: ID!
  lastUpdated: DateTimeISO!
  name: String!
  prevTier: String!
  tier: String!
  tierElo: Int!
}

"""The color of the fighter (BLUE or RED)"""
enum FighterColor {
  BLUE
  RED
}

type Match {
  bets: [Bet!]
  createdAt: DateTimeISO!
  externalId: Float

  """Get the blue fighter for this match from Salty Boy API"""
  fighterBlue: Fighter!

  """Get the red fighter for this match from Salty Boy API"""
  fighterRed: Fighter!
  id: ID!

  """Get all users who have placed bets on this match"""
  participants: [User!]!
  totalBlueBets: Float!
  totalRedBets: Float!
  winner: FighterColor
}

type MatchTotalsDto {
  blue: Float!
  red: Float!
}

type Mutation {
  cancelBet(amount: Float!): Boolean!

  """
  Create a new match by fetching the current match from the Salty Boy API. This will automatically end any existing match (via endMatch mutation) and process payouts before creating a new one. Requires ADMIN or PAYOUT_MANAGER permissions.
  """
  createMatch: Match!
  createUser(input: CreateUserInputDto!): User!
  deleteUser(id: String!): Boolean!

  """
  End an existing match by determining the winner and processing payouts. This will fetch the latest match data from Salty Boy to determine the winner. Requires ADMIN or PAYOUT_MANAGER permissions.
  """
  endMatch(
    """The ID of the match to end"""
    matchId: String!
  ): Match!
  finalizeBets(matchId: String!): Boolean!
  login(password: String!, username: String!): String!
  logout: Boolean!
  placeBet(amount: Float!, fighterColor: String!): Boolean!
  updateUser(id: String, input: UpdateUserInputDto!): User!
}

type PeriodStatsDto {
  grossRevenue: Float!
  losses: Float!
  revenueGained: Float!
  revenueLost: Float!
  winPercentage: Float!
  wins: Float!
}

type Query {
  """
  Get the most recent match in the system. Returns null if no matches exist. (Usually the current match)
  """
  getCurrentMatch: Match
  getMatchTotals: MatchTotalsDto!
  getMyBet: Bet
  user(id: String!): User
  users: [User!]!
}

"""The security level of a user"""
enum SecurityLevel {
  ADMIN
  PAYOUT_MANAGER
  USER
}

type Subscription {
  betTotalsUpdated: MatchTotalsDto!
}

input UpdateUserInputDto {
  alias: String
  balance: Float
  password: String
  securityLevel: SecurityLevel
  username: String
}

type User {
  alias: String!
  balance: Float!
  bets: [Bet!]
  createdAt: DateTimeISO!
  grossRevenue: Float!
  id: ID!
  matches: [Match!]!
  periodStats: PeriodStatsDto!
  securityLevel: SecurityLevel!
  totalLosses: Float!
  totalRevenueGained: Float!
  totalRevenueLost: Float!
  totalWins: Float!
  updatedAt: DateTimeISO!
  username: String!
  winPercentage: Float!
}